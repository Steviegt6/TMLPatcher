#region License
/*
 * Copyright (c)  2024 Tomat et al.           <https://github.com/steviegt6/fnb>
 * Copyright (c)  2024 Jonathan Behrens   <https://github.com/image-rs/fdeflate>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#endregion

namespace Tomat.FNB.Common.Deflate;

internal static class Tables
{
    /// <summary>
    ///     Hard-coded Huffman codes used regardless of the input.
    ///     <br />
    ///     These values work well for PNGs with some form of filtering enabled,
    ///     but will likely make most other inputs worse.
    /// </summary>
    public static readonly byte[] HUFFMAN_LENGTHS =
    [
        02, 03, 04, 05, 05, 06, 06, 07, 07, 07, 08, 08, 08, 08, 08, 09, 09, 09,
        09, 09, 09, 09, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
        12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
        12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
        12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
        12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
        12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
        12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
        12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
        12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
        12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 10, 11, 10, 10, 10, 10, 10, 10, 10, 10,
        10, 09, 09, 09, 09, 09, 08, 09, 08, 08, 08, 08, 08, 07, 07, 07, 06, 06,
        06, 05, 04, 03, 12, 12, 12, 09, 09, 11, 10, 11, 11, 10, 11, 11, 11, 11,
        11, 11, 12, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 09,
    ];

    public static readonly ushort[] HUFFMAN_CODES = Util.ComputeCodes(HUFFMAN_LENGTHS);

    /// <summary>
    ///     Length code for length values (derived from deflate spec).
    /// </summary>
    public static readonly ushort[] LENGTH_TO_SYMBOL =
    [
        257, 258, 259, 260, 261, 262, 263, 264, 265, 265, 266, 266, 267, 267,
        268, 268, 269, 269, 269, 269, 270, 270, 270, 270, 271, 271, 271, 271,
        272, 272, 272, 272, 273, 273, 273, 273, 273, 273, 273, 273, 274, 274,
        274, 274, 274, 274, 274, 274, 275, 275, 275, 275, 275, 275, 275, 275,
        276, 276, 276, 276, 276, 276, 276, 276, 277, 277, 277, 277, 277, 277,
        277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 278, 278, 278, 278,
        278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 279, 279,
        279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
        280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
        280, 280, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
        281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
        281, 281, 281, 281, 281, 281, 282, 282, 282, 282, 282, 282, 282, 282,
        282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
        282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 283, 283, 283, 283,
        283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
        283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
        284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
        284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
        284, 284, 284, 285,
    ];

    /// <summary>
    ///     Number of extra bits for length values (derived from deflate spec).
    /// </summary>
    public static readonly byte[] LENGTH_TO_LEN_EXTRA =
    [
        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0,
    ];

    public static readonly int[] BITMASKS =
    [
        0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F, 0x003F, 0x007F, 0x00FF,
        0x01FF, 0x03FF, 0x07FF, 0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF,
    ];

    /// <summary>
    ///     Order of the length code length alphabet (derived from deflate
    ///     spec).
    /// </summary>
    public static readonly USize[] CLCL_ORDER =
    [
        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15,
    ];

    /// <summary>
    ///     Number of extra bits for each length code (derived from deflate
    ///     spec).
    /// </summary>
    public static readonly byte[] LEN_SYM_TO_LEN_EXTRA =
    [
        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4,
        5, 5, 5, 5, 0,
    ];

    /// <summary>
    ///     The base length for each length code (derived from deflate spec).
    /// </summary>
    public static readonly USize[] LEN_SYM_TO_LEN_BASE =
    [
        003, 004, 005, 006, 007, 008, 009, 010, 011, 013, 015, 017, 019, 023,
        027, 031, 035, 043, 051, 059, 067, 083, 099, 115, 131, 163, 195, 227,
        258,
    ];

    /// <summary>
    ///     Number of extra bits for each distance code (derived from deflate
    ///     spec).
    /// </summary>
    public static readonly byte[] DIST_SYM_TO_DIST_EXTRA =
    [
        00, 00, 00, 00, 01, 01, 02, 02, 03, 03, 04, 04, 05, 05, 06, 06, 07, 07,
        08, 08, 09, 09, 10, 10, 11, 11, 12, 12, 13, 13,
    ];

    /// <summary>
    ///     The base distance for each distance code (derived from deflate
    ///     spec).
    /// </summary>
    public static readonly ushort[] DIST_SYM_TO_DIST_BASE =
    [
        00001, 00002, 00003, 00004, 00005, 00007, 00009, 00013, 00017, 00025,
        00033, 00049, 00065, 00097, 00129, 00193, 00257, 00385, 00513, 00769,
        01025, 01537, 02049, 03073, 04097, 06145, 08193, 12289, 16385, 24577,
    ];

    /// <summary>
    ///     The main <c>litlen_table</c> uses a 12-bit input to look up the
    ///     meaning of the symbol.  The table is split into 4 sections:
    ///     <code>
    ///         aaaaaaaa_bbbbbbbb_1000yyyy_0000xxxx  x = input_advance_bits, y = output_advance_bytes (literal)
    ///         0000000z_zzzzzzzz_00000yyy_0000xxxx  x = input_advance_bits, y = extra_bits, z = distance_base (length)
    ///         00000000_00000000_01000000_0000xxxx  x = input_advance_bits (EOF)
    ///         0000xxxx_xxxxxxxx_01100000_00000000  x = secondary_table_index
    ///         00000000_00000000_01000000_00000000  invalid code
    ///     </code>
    /// </summary>
    public static readonly uint[] LITLEN_TABLE_ENTRIES;

    /// <summary>
    ///     The distance table is a 512-entry table that maps 9 bits of distance
    ///     symbols to their meaning.
    ///     <code>
    ///         00000000_00000000_00000000_00000000     symbol is more than 9 bits
    ///         zzzzzzzz_zzzzzzzz_0000yyyy_0000xxxx     x = input_advance_bits, y = extra_bits, z = distance_base
    ///     </code>
    /// </summary>
    public static readonly uint[] DISTANCE_TABLE_ENTRIES;

    public static readonly uint[] FIXED_LITLEN_TABLE =
    [
        16391, 5275912, 1081608, 7537672, 2032135, 7373064, 3178760,
        12615945, 655367, 6324488, 2130184, 10518793, 33032, 8421640,
        4227336, 14713097, 393223, 5800200, 1605896, 9470217, 3867399,
        7897352, 3703048, 13664521, 1114375, 6848776, 2654472, 11567369,
        557320, 8945928, 4751624, 15761673, 262151, 5538056, 1343752,
        14877960, 2818823, 7635208, 3440904, 13140233, 852231, 6586632,
        2392328, 11043081, 295176, 8683784, 4489480, 15237385, 524295,
        6062344, 1868040, 9994505, 5440519, 8159496, 3965192, 14188809,
        1507847, 7110920, 2916616, 12091657, 819464, 9208072, 5013768,
        16285961, 196615, 5406984, 1212680, 10683656, 2294535, 7504136,
        3309832, 12878089, 721159, 6455560, 2261256, 10780937, 164104,
        8552712, 4358408, 14975241, 458759, 5931272, 1736968, 9732361,
        4391943, 8028424, 3834120, 13926665, 1245703, 6979848, 2785544,
        11829513, 688392, 9077000, 4882696, 16023817, 327687, 5669128,
        1474824, 16392, 3343111, 7766280, 3571976, 13402377, 983303,
        6717704, 2523400, 11305225, 426248, 8814856, 4620552, 15499529,
        589831, 6193416, 1999112, 10256649, 6489095, 8290568, 4096264,
        14450953, 1769991, 7241992, 3047688, 12353801, 950536, 9339144,
        5144840, 16548105, 16391, 5341448, 1147144, 8586504, 2032135,
        7438600, 3244296, 12747017, 655367, 6390024, 2195720, 10649865,
        98568, 8487176, 4292872, 14844169, 393223, 5865736, 1671432,
        9601289, 3867399, 7962888, 3768584, 13795593, 1114375, 6914312,
        2720008, 11698441, 622856, 9011464, 4817160, 15892745, 262151,
        5603592, 1409288, 16908296, 2818823, 7700744, 3506440, 13271305,
        852231, 6652168, 2457864, 11174153, 360712, 8749320, 4555016,
        15368457, 524295, 6127880, 1933576, 10125577, 5440519, 8225032,
        4030728, 14319881, 1507847, 7176456, 2982152, 12222729, 885000,
        9273608, 5079304, 16417033, 196615, 5472520, 1278216, 12780808,
        2294535, 7569672, 3375368, 13009161, 721159, 6521096, 2326792,
        10912009, 229640, 8618248, 4423944, 15106313, 458759, 5996808,
        1802504, 9863433, 4391943, 8093960, 3899656, 14057737, 1245703,
        7045384, 2851080, 11960585, 753928, 9142536, 4948232, 16154889,
        327687, 5734664, 1540360, 16392, 3343111, 7831816, 3637512,
        13533449, 983303, 6783240, 2588936, 11436297, 491784, 8880392,
        4686088, 15630601, 589831, 6258952, 2064648, 10387721, 6489095,
        8356104, 4161800, 14582025, 1769991, 7307528, 3113224, 12484873,
        1016072, 9404680, 5210376, 16679177, 16391, 5275912, 1081608,
        7537672, 2032135, 7373064, 3178760, 12681481, 655367, 6324488,
        2130184, 10584329, 33032, 8421640, 4227336, 14778633, 393223,
        5800200, 1605896, 9535753, 3867399, 7897352, 3703048, 13730057,
        1114375, 6848776, 2654472, 11632905, 557320, 8945928, 4751624,
        15827209, 262151, 5538056, 1343752, 14877960, 2818823, 7635208,
        3440904, 13205769, 852231, 6586632, 2392328, 11108617, 295176,
        8683784, 4489480, 15302921, 524295, 6062344, 1868040, 10060041,
        5440519, 8159496, 3965192, 14254345, 1507847, 7110920, 2916616,
        12157193, 819464, 9208072, 5013768, 16351497, 196615, 5406984,
        1212680, 10683656, 2294535, 7504136, 3309832, 12943625, 721159,
        6455560, 2261256, 10846473, 164104, 8552712, 4358408, 15040777,
        458759, 5931272, 1736968, 9797897, 4391943, 8028424, 3834120,
        13992201, 1245703, 6979848, 2785544, 11895049, 688392, 9077000,
        4882696, 16089353, 327687, 5669128, 1474824, 16392, 3343111,
        7766280, 3571976, 13467913, 983303, 6717704, 2523400, 11370761,
        426248, 8814856, 4620552, 15565065, 589831, 6193416, 1999112,
        10322185, 6489095, 8290568, 4096264, 14516489, 1769991, 7241992,
        3047688, 12419337, 950536, 9339144, 5144840, 16613641, 16391,
        5341448, 1147144, 8586504, 2032135, 7438600, 3244296, 12812553,
        655367, 6390024, 2195720, 10715401, 98568, 8487176, 4292872,
        14909705, 393223, 5865736, 1671432, 9666825, 3867399, 7962888,
        3768584, 13861129, 1114375, 6914312, 2720008, 11763977, 622856,
        9011464, 4817160, 15958281, 262151, 5603592, 1409288, 16908296,
        2818823, 7700744, 3506440, 13336841, 852231, 6652168, 2457864,
        11239689, 360712, 8749320, 4555016, 15433993, 524295, 6127880,
        1933576, 10191113, 5440519, 8225032, 4030728, 14385417, 1507847,
        7176456, 2982152, 12288265, 885000, 9273608, 5079304, 16482569,
        196615, 5472520, 1278216, 12780808, 2294535, 7569672, 3375368,
        13074697, 721159, 6521096, 2326792, 10977545, 229640, 8618248,
        4423944, 15171849, 458759, 5996808, 1802504, 9928969, 4391943,
        8093960, 3899656, 14123273, 1245703, 7045384, 2851080, 12026121,
        753928, 9142536, 4948232, 16220425, 327687, 5734664, 1540360, 16392,
        3343111, 7831816, 3637512, 13598985, 983303, 6783240, 2588936,
        11501833, 491784, 8880392, 4686088, 15696137, 589831, 6258952,
        2064648, 10453257, 6489095, 8356104, 4161800, 14647561, 1769991,
        7307528, 3113224, 12550409, 1016072, 9404680, 5210376, 16744713,
    ];

    public static readonly uint[] FIXED_DIST_TABLE =
    [
        98309, 16877317, 1147653, 268536581, 360709, 67209477, 4293893,
        1073843461, 229381, 33654789, 2196485, 536972293, 623109, 134318597,
        8488453, 5, 163845, 25265925, 1671941, 402754309, 491781, 100763909,
        6391045, 1610714373, 294917, 50432005, 3245061, 805407749, 885253,
        201427461, 12682757, 5,
    ];

    static Tables()
    {
        // LITLEN_TABLE_ENTRIES
        {
            LITLEN_TABLE_ENTRIES = new USize[288];
            for (var i = 0; i < 288; i++)
            {
                LITLEN_TABLE_ENTRIES[i] = Decompress.EXCEPTIONAL_ENTRY;
            }

            for (var i = 0; i < 256; i++)
            {
                LITLEN_TABLE_ENTRIES[i] = ((uint)i << 16) | Decompress.LITERAL_ENTRY | (1 << 8);
            }

            for (var i = 257; i < 286; i++)
            {
                LITLEN_TABLE_ENTRIES[i] = ((uint)LEN_SYM_TO_LEN_BASE[i - 257] << 16) | ((uint)LEN_SYM_TO_LEN_EXTRA[i - 257] << 8);
            }
        }

        // DISTANCE_TABLE_ENTRIES
        {
            DISTANCE_TABLE_ENTRIES = new uint[32];

            for (var i = 0; i < 30; i++)
            {
                DISTANCE_TABLE_ENTRIES[i] = ((uint)DIST_SYM_TO_DIST_BASE[i]) << 16 | ((uint)DIST_SYM_TO_DIST_EXTRA[i]) << 8 | Decompress.LITERAL_ENTRY;
            }
        }
    }
}